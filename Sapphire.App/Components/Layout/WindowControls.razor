<button
    class="rounded-none h-full w-12 select-none border-none hover:bg-[var(--mud-palette-lines-default)] no-drag"
    @onclick="() => Window?.Minimize()">
    <MinusIcon class="h-4 w-4"/>
</button>

@if (Window?.IsMaximizedAsync().Result ?? false)
{
    <button
        class="rounded-none h-full w-12 select-none border-none hover:bg-[var(--mud-palette-lines-default)] no-drag"
        @onclick="() => Window?.Restore()">
        <Square2StackIcon class="h-4 w-4"/>
    </button>
}
else
{
    <button
        class="rounded-none h-full w-12 select-none border-none hover:bg-[var(--mud-palette-lines-default)] no-drag"
        @onclick="() => Window?.Maximize()">
        <ArrowsPointingOutIcon class="h-4 w-4"/>
    </button>
}

<button
    class="rounded-none h-full w-12 select-none border-none hover:bg-[var(--mud-palette-lines-default)] no-drag"
    @onclick="() => Window?.Close()">
    <XMarkIcon class="h-4 w-4"/>
</button>


@code {
    [CascadingParameter] public required BrowserWindow? Window { get; set; }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Window is not null)
            {
                Window.OnMaximize += async () => await InvokeAsync(StateHasChanged);
                Window.OnUnmaximize += async () => await InvokeAsync(StateHasChanged);
            }
        }
        
        base.OnAfterRender(firstRender);
    }
}