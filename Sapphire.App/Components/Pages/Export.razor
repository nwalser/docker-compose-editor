@inherits ComEditorRefresh
@page "/export/docker-compose"

<WindowLayout PageTitle="@($"{State.Stack.Name} - Export to Docker Compose")">
    <ToolbarRightContent>
        <WindowControls/>
    </ToolbarRightContent>
    <RibbonLeftContent>
        <MudStack Spacing="1" Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" StartIcon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="@(() => Navigation.NavigateTo("/"))">Back</MudButton>
        </MudStack>
    </RibbonLeftContent>
    <RibbonRightContent>
        @if (Error is not null)
        {
            <MudChip T="string" Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Error" Icon="@Icons.Material.Filled.Error">@Error</MudChip>
        }
    </RibbonRightContent>
    <ChildContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="h-full">
            <MudStack>
                <MudTextField T="string" @bind-Value="Yaml" ShrinkLabel="true" Label="Docker Compose File"
                              Variant="Variant.Outlined" Class="h-full" Lines="18" Immediate="true" ReadOnly="true" />

                <MudStack Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Row="true">
                    <MudChip T="string" Size="Size.Medium" Variant="Variant.Outlined">@(YamlDockerStack?.Services?.Count ?? 0) Services</MudChip>
                    <MudChip T="string" Size="Size.Medium" Variant="Variant.Outlined">@(YamlDockerStack?.Volumes?.Count ?? 0) Volumes</MudChip>
                    <MudChip T="string" Size="Size.Medium" Variant="Variant.Outlined">@(YamlDockerStack?.Networks?.Count ?? 0) Networks</MudChip>
                </MudStack>
            </MudStack>
        </MudContainer>
    </ChildContent>
</WindowLayout>

@code {
    [Inject] public required NavigationManager Navigation { get; set; }

    private string? Yaml { get; set; } = string.Empty;
    private YamlDockerStack? YamlDockerStack { get; set; }
    private string? Error { get; set; }

    protected override Task OnParametersSetAsync()
    {
        ExportData();
        
        return base.OnParametersSetAsync();
    }

    private void ExportData()
    {
        try
        {
            YamlDockerStack = State.Stack.ToYaml();
            Yaml = YamlDockerStack.ToYaml();
            Error = null;
        }
        catch(Exception ex)
        {
            YamlDockerStack = null;
            Yaml = null;
            Error = ex.Message;
        }
    }
}