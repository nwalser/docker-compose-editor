@using System.Diagnostics
@using System.Drawing
@using System.Reactive.Disposables
@using Sapphire.Data.Validation
@inherits ComEditorRefresh

<MudStack Spacing="2">
    <MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Row="true">
        <MudText Typo="Typo.h1">Services</MudText>

        <MudStack Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Row="true">
            @{
                var issues = State.Stack.Issues().Where(i => i.Type == IssueType.Services).ToList();
                
                @if (issues.Any())
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Small" Variant="Variant.Outlined" OnClick="() => OpenIssueDialog(issues)" />
                }
            }
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Size="Size.Small" OnClick="() => AddService()"/>
        </MudStack>
    </MudStack>

    <MudStack Row="false" Spacing="3">
        @foreach (var service in State.Stack.Services)
        {
            <MudPaper Outlined="true" Class="p-2" Elevation="0">
                <MudStack Spacing="6">
                    <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                        @if (service.Open)
                        {
                            <MudIconButton Variant="Variant.Outlined" Size="Size.Small" OnClick="() => ToggleServiceOpen(service)" Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                        }
                        else
                        {
                            <MudIconButton Variant="Variant.Outlined" Size="Size.Small" OnClick="() => ToggleServiceOpen(service)" Icon="@Icons.Material.Filled.KeyboardArrowRight" />
                        }

                        <MudText Typo="Typo.body2" Class="truncate basis-60">@service.GetDisplayName()</MudText>
                        <MudText Typo="Typo.body2" Class="truncate basis-96" Style="direction: rtl">@service.Image</MudText>
                        <MudText Typo="Typo.body2" Class="truncate basis-full"></MudText>
                        
                        @{
                            var issues = service.Issues().ToList();
                            
                            @if (issues.Any())
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Small" Variant="Variant.Outlined" OnClick="() => OpenIssueDialog(issues)" />
                            }
                        }
                        
                        <MudIconButton Variant="Variant.Outlined" Size="Size.Small" OnClick="() => DeleteService(service)" Icon="@Icons.Material.Filled.Delete" />
                    </MudStack>

                    @if (service.Open)
                    {
                        <MudStack>
                            <MudText Typo="Typo.h2" Class="mb-2">General</MudText>
                            <MudStack Row="true" Spacing="1">
                                <MudTextField ShrinkLabel="true" Class="mud-input-narrow basis-full" @bind-Value="service.Id" Variant="Variant.Outlined" Label="Id" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </MudStack>

                            <MudStack Row="true" Spacing="1">
                                <MudTextField ShrinkLabel="true" Class="mud-input-narrow" @bind-Value="service.ContainerName" Variant="Variant.Outlined" Label="Name" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </MudStack>

                            <MudStack Row="true" Spacing="1">
                                <MudTextField ShrinkLabel="true" Class="mud-input-narrow" @bind-Value="service.Image" Variant="Variant.Outlined" Label="Image" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Link" Size="Size.Small" Variant="Variant.Outlined" OnClick="@(() => OpenLink($"https://hub.docker.com/search?q={service.Image}"))"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </MudStack>

                            <MudStack Row="true" Spacing="1">
                                <MudTextField ShrinkLabel="true" Class="mud-input-narrow" @bind-Value="service.Hostname" Variant="Variant.Outlined" Label="Hostname" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </MudStack>

                            <MudStack Row="true" Spacing="1">
                                <MudTextField ShrinkLabel="true" Class="mud-input-narrow" @bind-Value="service.Command" Variant="Variant.Outlined" Label="Command" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </MudStack>

                            <MudStack Row="true" Spacing="1">
                                <MudTextField ShrinkLabel="true" Class="mud-input-narrow" @bind-Value="service.EnvFile" Variant="Variant.Outlined" Label="Environment File Path" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </MudStack>
                        </MudStack>
                        
                        <MudStack Row="true" Spacing="6">
                            <ComItemList Title="Environment Variables" Items="service.EnvironmentVariables">
                                <MudTextField Class="mud-input-narrow basis-full" @bind-Value="@context.Value" Variant="Variant.Outlined" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </ComItemList>

                            <ComItemList Title="Ports" Items="service.Ports">
                                <MudTextField Class="mud-input-narrow basis-full" @bind-Value="@context.Value" Variant="Variant.Outlined" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </ComItemList>
                        </MudStack>
                        
                        <MudStack Row="true" Spacing="6">
                            <ComItemList Title="Networks" Items="service.Networks">
                                <MudTextField Class="mud-input-narrow basis-full" @bind-Value="@context.Value" Variant="Variant.Outlined" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </ComItemList>

                            <ComItemList Title="Volumes" Items="service.Volumes">
                                <MudTextField Class="mud-input-narrow basis-full" @bind-Value="@context.Value" Variant="Variant.Outlined" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </ComItemList>
                        </MudStack>
                        
                        <MudStack Row="true" Spacing="6">
                            <ComItemList Title="Annotations" Items="service.Annotations">
                                <MudTextField Class="mud-input-narrow basis-full" @bind-Value="@context.Value" Variant="Variant.Outlined" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </ComItemList>

                            <ComItemList Title="Labels" Items="service.Labels">
                                <MudTextField Class="mud-input-narrow basis-full" @bind-Value="@context.Value" Variant="Variant.Outlined" @bind-Value:after="() => State.PushHistory()"/>
                                <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton>
                            </ComItemList>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        }
        
        @if (!State.Stack.Services.Any())
        {
            <div class="flex flex-row items-center gap-4 outline-[var(--mud-palette-lines-default)] outline-1 rounded-sm p-2 outline-dashed">
                <MudText Typo="Typo.body2" Class="truncate basis-full text-center">No Services Defined</MudText>
            </div>
        }
    </MudStack>
</MudStack>


@code {

    private void ToggleServiceOpen(Service service)
    {
        service.Open = !service.Open;
        State.PushHistory();
    }

    private void DeleteService(Service service)
    {
        State.Stack.Services.Remove(service);
        State.PushHistory();
    }

    private void AddService()
    {
        State.Stack.Services.Add(new Service()
        {
            Id = "jolly_beans"
        });

        State.PushHistory();
    }
}